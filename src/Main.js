import React from "react"
import Die from "./Die";
import { nanoid } from "nanoid";
import Confetti from 'react-confetti'

export default function Main() {

    // State Variable Declarations 

    const [dice, setDice] = React.useState(allNewDice());
    const [tenzies, setTenzies] = React.useState(false);
    const [time, setTime] = React.useState(new Date().getTime());
    const [timeForCompletion, setTimeForCompletion] = React.useState(999999);
    const [numberOfMoves, setNumberOfMoves] = React.useState(0);

    /* Checks if all the elements are selected and all are same, 
        if so then set 'tenzie' variable to 'true'  */
    React.useEffect(() => {
        const allHeld = dice.every(die => die.isHeld);
        const firstValue = dice[0].value;
        const allSameValues = dice.every(die => die.value === firstValue);
        if (allHeld && allSameValues) setTenzies(true);
    }, [dice])

    /* sets the high score in the local storage if it current completion
        time is less than that of stored in local storage */
    React.useEffect(() => {
        if (tenzies) {
            console.log("Number of moves required are: ", numberOfMoves);
            const newTime = Math.floor((new Date().getTime() - time) / 1000);
            console.log(newTime);
            setTimeForCompletion(newTime)
            let highScore = localStorage.getItem("high-score");
            if (highScore) {
                console.log("LOCAL STORAGE TIME: ", localStorage.getItem("high-score"), " The time for completion: ", parseInt(timeForCompletion), localStorage.getItem("SOMETHING"))
                if (parseInt(highScore) > parseInt(timeForCompletion)) {
                    localStorage.setItem("high-score", "" + parseInt(timeForCompletion));
                }
            }
            else {
                console.log("Coming inside else ")
                localStorage.setItem("high-score", "" + parseInt(timeForCompletion))
            }
        }
    }, [tenzies, timeForCompletion, numberOfMoves, time])

    /* returns array of objects to create the dices*/
    function allNewDice() {
        let someArray = []
        for (let i = 0; i < 10; i++)
            someArray.push(
                {
                    value: Math.ceil(Math.random() * 6),
                    isHeld: false,
                    id: nanoid()
                }
            );
        return someArray
    }

    /* We change the value of dices to a random value 
       for dices which are not held by player */
    function rollDice(e) {
        if (tenzies) {
            setDice(allNewDice());
            setTenzies(false);
            setTime(new Date().getTime());
            setNumberOfMoves(0);
        }
        else {
            setDice(oldDice => oldDice.map(dice => dice.isHeld ? dice : { ...dice, value: Math.ceil(Math.random() * 6) }));
        }
        setNumberOfMoves(prevMoves => prevMoves + 1)
    }

    // returns boolean for the current timeOfCompletion is smaller than localStorage high score
    function isNewHighScore() {
        return parseInt(localStorage.getItem("high-score")) > parseInt(timeForCompletion)
    }

    // Toggles the isHeld state for the dice with given id
    function holdDice(id) {
        setDice(oldDice => oldDice.map(die => {
            return die.id === id ? { ...die, isHeld: !die.isHeld } : die;
        }));
    }

    // Creates the actual die's for all the values generated by the allNewDice function 
    const diceElements = dice.map(die => {
        return <Die
            holdDice={() => holdDice(die.id)}
            key={die.id}
            isHeld={die.isHeld}
            value={die.value} />
    })

    return (
        <div className="main">

            <h1 className="title">Tenzies</h1>
            <h4 className="instructions">Roll until all dice are the same. Click each die to freeze it at its current value between rolls.</h4>
            <div className="die-container">
                {diceElements}
            </div>

            {tenzies && <div className="time">Time Required<p>{timeForCompletion} Seconds</p></div>}
            {tenzies && localStorage.getItem('high-score') && (isNewHighScore() ? <h3 className="new-highscore">New High Score!</h3> : <h3 className="high-score">Previous high score is <i>{localStorage.getItem("high-score")}</i> Seconds</h3>)}
            {tenzies && <Confetti />}

            <button onClick={rollDice} className="roll-button">{tenzies ? "New Game" : "Roll"}</button>

        </div>
    )
}